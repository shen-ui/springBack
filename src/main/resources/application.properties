# Hosts application locally on port 3000 instead of a busier port
server.port=${vblog.port}
## OAUTH CONFIGURATION

## spring secret file. Used like .env on typescript
spring.config.import=optional:secrets.properties
logging.level.org.springframework.security=TRACE
# GitHub Login
spring.security.oauth2.client.registration.github.client-id=${vblog.gitOauthClientId}
spring.security.oauth2.client.registration.github.client-secret=${vblog.gitOauthClientSecret}
# Google Login
spring.security.oauth2.client.registration.google.client-id=${vblog.googleOauthClientId}
spring.security.oauth2.client.registration.google.client-secret=${vblog.googleOauthSecret}

## spring JPA to connect to a database
spring.datasource.url=${vblog.rdsURL}
spring.datasource.driver-class-name=org.postgresql.Driver
spring.datasource.username=${vblog.iamUser}
spring.datasource.password=${vblog.iamPass}
## creates a schema and sets it as the schema to deploy Spring boots table to.
spring.jpa.properties.hibernate.default_schema=${vblog.schemaName}
## create_namespaces allows springJPA to create schema if not exists.
spring.jpa.properties.hibernate.hbm2ddl.create_namespaces=true
spring.jpa.hibernate.ddl-auto=create-drop
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.defer-datasource-initialization=true
server.error.include-message=always

#H2 settings
spring.h2.console.enabled=true
spring.h2.console.path=/h2-console
spring.datasource.driverClassName=org.h2.Driver
